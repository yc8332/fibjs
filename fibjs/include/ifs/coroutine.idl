
/*! @brief 并发控制模块

 引用方法：var coroutine = require('coroutine');
 */
class coroutine : module
{
    /*! @brief 锁对象，参见 Lock */
    static Lock new Lock();

    /*! @brief 信号量对象，参见 Semaphore */
    static Semaphore new Semaphore();

    /*! @brief 条件变量对象，参见 Condition */
    static Condition new Condition();

    /*! @brief 信号量对象，参见 Event */
    static Event new Event();

    /*! @brief 事件触发对象，可用于建立观察者模式，支持事件触发的对象均继承于此，参见 Trigger 对象。 */
    static Trigger new Trigger();

    /*! @brief 阻塞队列对象，参见 BlockQueue */
    static BlockQueue new BlockQueue();

    /*! @brief 启动一个纤程并返回纤程对象
     @param func 制定纤程执行的函数
     @param ... 可变参数序列，此序列会在纤程内传递给函数
     @return 返回纤程对象
     */
    static Fiber start(Function func, ...);

    /*! @brief 并行执行一组函数，并等待返回
     @param func 并行执行的函数数组
     @return 返回函数执行结果的数组
     */
    static Array parallel(Array func);

    /*! @brief 并行执行一个函数处理一组数据，并等待返回
     @param data 并行执行的数据数组
     @param func 并行执行的函数
     @return 返回函数执行结果的数组
     */
    static Array parallel(Array data, Function func);

    /*! @brief 并行执行一组函数，并等待返回
     @param ... 一组并行执行的函数
     @return 返回函数执行结果的数组
     */
    static Array parallel(...);

    /*! @brief 返回当前纤程
     @return 当前纤程对象
     */
    static Fiber current();

    /*! @brief 暂停当前纤程指定的时间
     @param ms 指定要暂停的时间，以毫秒为单位，缺省为 0，即有空闲立即回恢复运行
     */
    static sleep(Integer ms = 0) async;

    /*! @brief 是否强制使用单用户模式，缺省为 False

     单用户模式下，非必须的异步操作会在 js 线程阻塞执行，可消除异步消息传送导致的额外负载，从而提高运算速度，但是会阻塞其他所有 Fiber 的运行。可用于并发要求低的计算密集型应用。
     */
    static Boolean singleUserMode;
};
